
Title: Convert ReactJS Web App to Mobile App using Capacitor (Ionic) - Full Guide for Cursor

Objective:
I have a fully built ReactJS web application that I want to convert into a native mobile application using Capacitor by Ionic. I do NOT want to rewrite my app using Ionic React – I want to keep my existing ReactJS codebase intact.

Goals:
1. Wrap my existing ReactJS app as a native Android/iOS mobile app using Capacitor
2. Retain the same UI/UX as my web app
3. Use Capacitor plugins to access native features like:
   - Push Notifications
   - Camera
   - File Uploads
4. View and test the app directly on a real Android device
5. Publish the app to the Google Play Store (optional)
6. Perform this with minimal or no code changes unless necessary

Requirements:
- Provide clear, step-by-step CLI commands
- Detail the required folder structure and configuration files
- Include Android Studio setup instructions for testing the app
- Show how to access native features using Capacitor plugins
- Help with splash screen, app icon, and renaming the app
- Advise on responsive layout checks for mobile screens
- No use of Ionic UI framework – ReactJS codebase only

Steps Required:

Step 1: Capacitor Installation
- Inside your existing ReactJS app folder, run:
    npm install @capacitor/core @capacitor/cli
    npx cap init [appName] [app.id] --web-dir=build
    (Use something like com.example.myapp for app.id)

Step 2: Build the React App
- Run:
    npm run build

Step 3: Add Native Platform
- Run:
    npx cap add android

Step 4: Copy Build Files to Native Platform
- Run:
    npx cap copy

Step 5: Open in Android Studio
- Run:
    npx cap open android
- Android Studio will open the native project. Wait for Gradle sync to complete.
- Connect your Android phone via USB (ensure USB debugging is enabled)
- Run the app using the green 'Run' button and select your phone as the target

Step 6: Adjust Mobile Experience (Optional but Recommended)
- Use meta tags like viewport for better scaling
- Test your web app in Chrome mobile emulator before wrapping it

Step 7: Using Capacitor Plugins (Examples)
- Install Camera plugin:
    npm install @capacitor/camera
    npx cap sync

- Use camera in your React component:
    import { Camera, CameraResultType } from '@capacitor/camera';
    const takePhoto = async () => {
      const image = await Camera.getPhoto({
        quality: 90,
        allowEditing: false,
        resultType: CameraResultType.Uri
      });
      console.log(image.webPath);
    };

- Install Push Notifications:
    npm install @capacitor/push-notifications
    npx cap sync

Step 8: Customize Splash Screen and App Icon
- Use https://capacitorjs.com/docs/guides/splash-screens
- Use the "capacitor-assets" tool to generate icons and splash:
    npm install -g @capacitor/assets
    capacitor-assets generate --iconPath=./icon.png --splashPath=./splash.png

Step 9: Run on Real Device
- Make sure developer options and USB debugging are enabled on your phone
- Connect via USB and run:
    npx cap run android --target [device_id]
    or launch from Android Studio

Step 10: Play Store Preparation (Optional)
- Generate a signed APK or AAB from Android Studio
- Follow Google Play Console steps to upload and release your app

Tips:
- Test thoroughly in Chrome mobile emulator before deploying
- You can use @capacitor/filesystem, @capacitor/geolocation, and other plugins the same way

This should result in a fully functional native Android/iOS app powered by your existing ReactJS codebase.
